name: Gitemoji Analysis

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  gitemoji-suggestion:
    runs-on: ubuntu-latest
    # Only run on the main NVLabs/parrot repository, not on forks
    if: github.repository == 'NVLabs/parrot'
    
    permissions:
      pull-requests: write
      
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for commit analysis
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install gitmojis
        
    - name: Analyze commits for gitemoji suggestions
      run: |
        # Create the gitemoji analysis script
        cat > analyze-gitemoji.js << 'EOF'
        const fs = require('fs');
        const { execSync } = require('child_process');
        
        // Comprehensive gitemoji mappings based on official gitmoji spec
        const gitemojis = {
          // Conventional commit types (primary mappings)
          'feat': '✨',      // :sparkles: Introduce new features
          'fix': '🐛',       // :bug: Fix a bug
          'docs': '📝',      // :memo: Add or update documentation
          'style': '🎨',     // :art: Improve structure / format of the code
          'refactor': '♻️',  // :recycle: Refactor code
          'perf': '⚡️',     // :zap: Improve performance
          'test': '✅',      // :white_check_mark: Add, update, or pass tests
          'chore': '🔧',     // :wrench: Add or update configuration files
          'ci': '👷',        // :construction_worker: Add or update CI build system
          'build': '📦️',    // :package: Add or update compiled files or packages
          'revert': '⏪️',   // :rewind: Revert changes
          
          // Specific action keywords
          'hotfix': '🚑️',   // :ambulance: Critical hotfix
          'security': '🔒️', // :lock: Fix security or privacy issues
          'secrets': '🔐',   // :closed_lock_with_key: Add or update secrets
          'release': '🔖',   // :bookmark: Release / Version tags
          'deploy': '🚀',    // :rocket: Deploy stuff
          'wip': '🚧',       // :construction: Work in progress
          'warning': '🚨',   // :rotating_light: Fix compiler / linter warnings
          'lint': '🚨',      // :rotating_light: Fix compiler / linter warnings
          'breaking': '💥',  // :boom: Introduce breaking changes
          'deprecate': '🗑️', // :wastebasket: Deprecate code that needs to be cleaned up
          'remove': '🔥',    // :fire: Remove code or files
          'move': '🚚',      // :truck: Move or rename resources
          'rename': '🚚',    // :truck: Move or rename resources
          'typo': '✏️',      // :pencil2: Fix typos
          'merge': '🔀',     // :twisted_rightwards_arrows: Merge branches
          'experiment': '⚗️', // :alembic: Perform experiments
          'mock': '🤡',      // :clown_face: Mock things
          'easter': '🥚',    // :egg: Add or update an easter egg
          'snapshot': '📸',  // :camera_flash: Add or update snapshots
          'seed': '🌱',      // :seedling: Add or update seed files
          'flag': '🚩',      // :triangular_flag_on_post: Add, update, or remove feature flags
          'catch': '🥅',     // :goal_net: Catch errors
          'animation': '💫', // :dizzy: Add or update animations and transitions
          'auth': '🛂',      // :passport_control: Work on code related to authorization
          'bandage': '🩹',   // :adhesive_bandage: Simple fix for a non-critical issue
          'explore': '🧐',   // :monocle_face: Data exploration/inspection
          'dead': '⚰️',     // :coffin: Remove dead code
          'failing': '🧪',   // :test_tube: Add a failing test
          'business': '👔',  // :necktie: Add or update business logic
          'health': '🩺',    // :stethoscope: Add or update healthcheck
          'infrastructure': '🧱', // :bricks: Infrastructure related changes
          'dx': '🧑‍💻',      // :technologist: Improve developer experience
          'sponsor': '💸',   // :money_with_wings: Add sponsorships or money related infrastructure
          'thread': '🧵',    // :thread: Add or update code related to multithreading
          'validation': '🦺', // :safety_vest: Add or update code related to validation
          'offline': '✈️',   // :airplane: Improve offline support
          
          // Dependencies
          'upgrade': '⬆️',   // :arrow_up: Upgrade dependencies
          'downgrade': '⬇️', // :arrow_down: Downgrade dependencies
          'pin': '📌',       // :pushpin: Pin dependencies to specific versions
          'add-dep': '➕',   // :heavy_plus_sign: Add a dependency
          'remove-dep': '➖', // :heavy_minus_sign: Remove a dependency
          
          // File-based patterns
          'cmake': '📦️',    // :package: CMake files (build system)
          'docker': '🐳',   // :whale: Docker files
          'dockerfile': '🐳', // :whale: Docker files
          'github': '👷',   // :construction_worker: GitHub workflows
          'readme': '📝',   // :memo: README files
          'license': '📄',  // :page_facing_up: License files
          'gitignore': '🙈', // :see_no_evil: .gitignore
          'ui': '💄',       // :lipstick: UI and style files
          'css': '💄',      // :lipstick: UI and style files
          'html': '💄',     // :lipstick: UI and style files
          'database': '🗃️', // :card_file_box: Database related changes
          'db': '🗃️',       // :card_file_box: Database related changes
          'log': '🔊',      // :loud_sound: Add or update logs
          'logging': '🔊',  // :loud_sound: Add or update logs
          'analytics': '📈', // :chart_with_upwards_trend: Add or update analytics
          'i18n': '🌐',     // :globe_with_meridians: Internationalization
          'locale': '🌐',   // :globe_with_meridians: Internationalization
          'responsive': '📱', // :iphone: Work on responsive design
          'mobile': '📱',   // :iphone: Work on responsive design
          'seo': '🔍️',     // :mag: Improve SEO
          'types': '🏷️',   // :label: Add or update types
          'typescript': '🏷️', // :label: Add or update types
          'accessibility': '♿️', // :wheelchair: Improve accessibility
          'a11y': '♿️',     // :wheelchair: Improve accessibility
          'ux': '🚸',       // :children_crossing: Improve user experience
          'usability': '🚸', // :children_crossing: Improve user experience
          'architecture': '🏗️', // :building_construction: Make architectural changes
          'contributor': '👥', // :busts_in_silhouette: Add or update contributor(s)
          'comment': '💡',  // :bulb: Add or update comments in source code
          'comments': '💡', // :bulb: Add or update comments in source code
          'text': '💬',     // :speech_balloon: Add or update text and literals
          'assets': '🍱',   // :bento: Add or update assets
          
          // CUDA/GPU specific (keep existing CUDA mappings)
          'cuda': '🚀',     // :rocket: CUDA files (deploy/performance context)
          'gpu': '⚡️',     // :zap: GPU related (performance context)
          'kernel': '⚡️',  // :zap: Kernel optimizations (performance context)
          
          // General action words (fallbacks)
          'update': '⬆️',   // :arrow_up: General updates (upgrade context)
          'add': '➕',      // :heavy_plus_sign: Adding files (dependency context)
          'delete': '🔥',   // :fire: Removing files
          'initial': '🎉', // :tada: Initial commit
          'init': '🎉',    // :tada: Initial commit
          'start': '🎉',   // :tada: Begin a project
        };
        
        function hasGitemoji(message) {
          // Check if message already contains an emoji
          const emojiRegex = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/u;
          return emojiRegex.test(message);
        }
        
        function detectCommitType(message, files) {
          const lowerMessage = message.toLowerCase();
          
          // Check conventional commit format first
          const conventionalMatch = message.match(/^(\w+)(\(.+\))?:/);
          if (conventionalMatch) {
            const type = conventionalMatch[1].toLowerCase();
            if (gitemojis[type]) {
              return gitemojis[type];
            }
          }
          
          // Check for specific keywords in message
          for (const [keyword, emoji] of Object.entries(gitemojis)) {
            if (lowerMessage.includes(keyword)) {
              return emoji;
            }
          }
          
          // Analyze changed files
          if (files) {
            if (files.some(f => f.includes('.cu') || f.includes('.cuh'))) {
              return gitemojis['cuda'];
            }
            if (files.some(f => f.includes('CMakeLists.txt') || f.includes('.cmake'))) {
              return gitemojis['cmake'];
            }
            if (files.some(f => f.includes('.github'))) {
              return gitemojis['github'];
            }
            if (files.some(f => f.toLowerCase().includes('readme'))) {
              return gitemojis['readme'];
            }
            if (files.some(f => f.includes('test'))) {
              return gitemojis['test'];
            }
            if (files.some(f => f.includes('doc'))) {
              return gitemojis['docs'];
            }
          }
          
          // Default based on action words
          if (lowerMessage.includes('add') || lowerMessage.includes('new')) {
            return gitemojis['add'];
          }
          if (lowerMessage.includes('remove') || lowerMessage.includes('delete')) {
            return gitemojis['remove'];
          }
          if (lowerMessage.includes('update') || lowerMessage.includes('modify')) {
            return gitemojis['update'];
          }
          if (lowerMessage.includes('initial') || lowerMessage.includes('first')) {
            return gitemojis['initial'];
          }
          
          // Default fallback
          return gitemojis['update'];
        }
        
        try {
          // Get all commits in the PR
          const prCommits = execSync('git log --pretty=format:"%H|%s" origin/main..HEAD', { encoding: 'utf8' })
            .trim().split('\n').filter(line => line);
          
          const suggestions = [];
          
          for (const commitLine of prCommits) {
            const [sha, message] = commitLine.split('|');
            
            // Skip if already has gitemoji
            if (hasGitemoji(message)) {
              console.log('✅ Commit already has gitemoji:', message);
              continue;
            }
            
            // Get changed files in this commit
            let changedFiles = [];
            try {
              changedFiles = execSync(`git diff-tree --no-commit-id --name-only -r ${sha}`, { encoding: 'utf8' })
                .trim().split('\n').filter(f => f);
            } catch (e) {
              console.log('Could not get changed files for', sha);
            }
            
            // Detect appropriate gitemoji
            const emoji = detectCommitType(message, changedFiles);
            const newMessage = emoji + ' ' + message;
            
            suggestions.push({
              sha: sha.substring(0, 7),
              original: message,
              suggested: newMessage,
              emoji: emoji,
              files: changedFiles
            });
            
            console.log(`📝 ${sha.substring(0, 7)}: ${message}`);
            console.log(`✨ Suggested: ${newMessage}`);
            console.log(`📁 Files: ${changedFiles.join(', ')}`);
            console.log('---');
          }
          
          // Write suggestions to file for the next step
          fs.writeFileSync('/tmp/gitemoji-suggestions.json', JSON.stringify(suggestions, null, 2));
          
          if (suggestions.length === 0) {
            console.log('🎉 All commits already have gitemojis!');
          } else {
            console.log(`📋 Found ${suggestions.length} commits that could use gitemojis`);
          }
          
        } catch (error) {
          console.error('❌ Error:', error.message);
          // Don't fail the workflow, just log the error
          fs.writeFileSync('/tmp/gitemoji-suggestions.json', JSON.stringify([], null, 2));
        }
        EOF
        
        # Run the gitemoji analysis
        node analyze-gitemoji.js
        
    - name: Comment on PR with gitemoji suggestions
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read suggestions from the analysis
          let suggestions = [];
          try {
            suggestions = JSON.parse(fs.readFileSync('/tmp/gitemoji-suggestions.json', 'utf8'));
          } catch (e) {
            console.log('No suggestions file found');
            return;
          }
          
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          // Check if we already commented about gitemoji
          const existingComment = comments.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('🎨 **Gitemoji Analysis**')
          );
          
          if (existingComment) {
            // Update existing comment
            if (suggestions.length === 0) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: '🎨 **Gitemoji Analysis**: 🎉 All commits in this PR already have appropriate gitemojis! Great job following the [gitmoji specification](https://gitmoji.dev/).'
              });
            } else {
              let body = '🎨 **Gitemoji Analysis**: Found commits that could benefit from gitemojis based on the [official specification](https://gitmoji.dev/):\n\n';
              
              for (const suggestion of suggestions) {
                body += `**Commit \`${suggestion.sha}\`:**\n`;
                body += `- Original: \`${suggestion.original}\`\n`;
                body += `- Suggested: \`${suggestion.suggested}\`\n`;
                body += `- Files: ${suggestion.files.join(', ')}\n\n`;
              }
              
              body += '💡 **Tip**: You can manually add these gitemojis to make your commit history more expressive!';
              
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            }
          } else {
            // Create new comment
            if (suggestions.length === 0) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '🎨 **Gitemoji Analysis**: 🎉 All commits in this PR already have appropriate gitemojis! Great job following the [gitmoji specification](https://gitmoji.dev/).'
              });
            } else {
              let body = '🎨 **Gitemoji Analysis**: Found commits that could benefit from gitemojis based on the [official specification](https://gitmoji.dev/):\n\n';
              
              for (const suggestion of suggestions) {
                body += `**Commit \`${suggestion.sha}\`:**\n`;
                body += `- Original: \`${suggestion.original}\`\n`;
                body += `- Suggested: \`${suggestion.suggested}\`\n`;
                body += `- Files: ${suggestion.files.join(', ')}\n\n`;
              }
              
              body += '💡 **Tip**: You can manually add these gitemojis to make your commit history more expressive!';
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
          }
